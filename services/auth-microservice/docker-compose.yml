version: '3.8'

services:
  # Auth Microservice
  auth-service:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: auth-service:latest
    container_name: auth-service
    restart: unless-stopped
    env_file:
      - ./backend/.env
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql_mysql-server
    restart: unless-stopped
    env_file:
      - ./mysql.env
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    deploy:
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for Session Storage
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - app-network
    deploy:
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/certs:/etc/nginx/certs
      - ./nginx/logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - auth-service
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  app-network:
    driver: overlay
    attachable: true

volumes:
  mysql-data:
  redis-data: 